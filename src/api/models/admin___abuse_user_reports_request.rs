/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminAbuseUserReportsRequest {
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    #[serde(rename = "sinceId", skip_serializing_if = "Option::is_none")]
    pub since_id: Option<String>,
    #[serde(rename = "untilId", skip_serializing_if = "Option::is_none")]
    pub until_id: Option<String>,
    #[serde(rename = "state", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub state: Option<Option<String>>,
    #[serde(rename = "reporterOrigin", skip_serializing_if = "Option::is_none")]
    pub reporter_origin: Option<ReporterOrigin>,
    #[serde(rename = "targetUserOrigin", skip_serializing_if = "Option::is_none")]
    pub target_user_origin: Option<TargetUserOrigin>,
    #[serde(rename = "forwarded", skip_serializing_if = "Option::is_none")]
    pub forwarded: Option<bool>,
}

impl AdminAbuseUserReportsRequest {
    pub fn new() -> AdminAbuseUserReportsRequest {
        AdminAbuseUserReportsRequest {
            limit: None,
            since_id: None,
            until_id: None,
            state: None,
            reporter_origin: None,
            target_user_origin: None,
            forwarded: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReporterOrigin {
    #[serde(rename = "combined")]
    Combined,
    #[serde(rename = "local")]
    Local,
    #[serde(rename = "remote")]
    Remote,
}

impl Default for ReporterOrigin {
    fn default() -> ReporterOrigin {
        Self::Combined
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TargetUserOrigin {
    #[serde(rename = "combined")]
    Combined,
    #[serde(rename = "local")]
    Local,
    #[serde(rename = "remote")]
    Remote,
}

impl Default for TargetUserOrigin {
    fn default() -> TargetUserOrigin {
        Self::Combined
    }
}

