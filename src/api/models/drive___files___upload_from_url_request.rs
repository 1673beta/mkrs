/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DriveFilesUploadFromUrlRequest {
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "folderId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub folder_id: Option<Option<String>>,
    #[serde(rename = "isSensitive", skip_serializing_if = "Option::is_none")]
    pub is_sensitive: Option<bool>,
    #[serde(rename = "comment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub comment: Option<Option<String>>,
    #[serde(rename = "marker", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub marker: Option<Option<String>>,
    #[serde(rename = "force", skip_serializing_if = "Option::is_none")]
    pub force: Option<bool>,
}

impl DriveFilesUploadFromUrlRequest {
    pub fn new(url: String) -> DriveFilesUploadFromUrlRequest {
        DriveFilesUploadFromUrlRequest {
            url,
            folder_id: None,
            is_sensitive: None,
            comment: None,
            marker: None,
            force: None,
        }
    }
}

