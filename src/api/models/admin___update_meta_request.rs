/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminUpdateMetaRequest {
    #[serde(rename = "disableRegistration", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub disable_registration: Option<Option<bool>>,
    #[serde(rename = "pinnedUsers", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pinned_users: Option<Option<Vec<String>>>,
    #[serde(rename = "hiddenTags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hidden_tags: Option<Option<Vec<String>>>,
    #[serde(rename = "blockedHosts", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub blocked_hosts: Option<Option<Vec<String>>>,
    #[serde(rename = "sensitiveWords", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sensitive_words: Option<Option<Vec<String>>>,
    #[serde(rename = "prohibitedWords", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prohibited_words: Option<Option<Vec<String>>>,
    #[serde(rename = "themeColor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub theme_color: Option<Option<String>>,
    #[serde(rename = "mascotImageUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mascot_image_url: Option<Option<String>>,
    #[serde(rename = "bannerUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub banner_url: Option<Option<String>>,
    #[serde(rename = "serverErrorImageUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub server_error_image_url: Option<Option<String>>,
    #[serde(rename = "infoImageUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub info_image_url: Option<Option<String>>,
    #[serde(rename = "notFoundImageUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub not_found_image_url: Option<Option<String>>,
    #[serde(rename = "iconUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub icon_url: Option<Option<String>>,
    #[serde(rename = "app192IconUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub app192_icon_url: Option<Option<String>>,
    #[serde(rename = "app512IconUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub app512_icon_url: Option<Option<String>>,
    #[serde(rename = "backgroundImageUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub background_image_url: Option<Option<String>>,
    #[serde(rename = "logoImageUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub logo_image_url: Option<Option<String>>,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "shortName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub short_name: Option<Option<String>>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "defaultLightTheme", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default_light_theme: Option<Option<String>>,
    #[serde(rename = "defaultDarkTheme", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default_dark_theme: Option<Option<String>>,
    #[serde(rename = "cacheRemoteFiles", skip_serializing_if = "Option::is_none")]
    pub cache_remote_files: Option<bool>,
    #[serde(rename = "cacheRemoteSensitiveFiles", skip_serializing_if = "Option::is_none")]
    pub cache_remote_sensitive_files: Option<bool>,
    #[serde(rename = "emailRequiredForSignup", skip_serializing_if = "Option::is_none")]
    pub email_required_for_signup: Option<bool>,
    #[serde(rename = "enableHcaptcha", skip_serializing_if = "Option::is_none")]
    pub enable_hcaptcha: Option<bool>,
    #[serde(rename = "hcaptchaSiteKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hcaptcha_site_key: Option<Option<String>>,
    #[serde(rename = "hcaptchaSecretKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hcaptcha_secret_key: Option<Option<String>>,
    #[serde(rename = "enableMcaptcha", skip_serializing_if = "Option::is_none")]
    pub enable_mcaptcha: Option<bool>,
    #[serde(rename = "mcaptchaSiteKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mcaptcha_site_key: Option<Option<String>>,
    #[serde(rename = "mcaptchaInstanceUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mcaptcha_instance_url: Option<Option<String>>,
    #[serde(rename = "mcaptchaSecretKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mcaptcha_secret_key: Option<Option<String>>,
    #[serde(rename = "enableRecaptcha", skip_serializing_if = "Option::is_none")]
    pub enable_recaptcha: Option<bool>,
    #[serde(rename = "recaptchaSiteKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recaptcha_site_key: Option<Option<String>>,
    #[serde(rename = "recaptchaSecretKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub recaptcha_secret_key: Option<Option<String>>,
    #[serde(rename = "enableTurnstile", skip_serializing_if = "Option::is_none")]
    pub enable_turnstile: Option<bool>,
    #[serde(rename = "turnstileSiteKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub turnstile_site_key: Option<Option<String>>,
    #[serde(rename = "turnstileSecretKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub turnstile_secret_key: Option<Option<String>>,
    #[serde(rename = "sensitiveMediaDetection", skip_serializing_if = "Option::is_none")]
    pub sensitive_media_detection: Option<SensitiveMediaDetection>,
    #[serde(rename = "sensitiveMediaDetectionSensitivity", skip_serializing_if = "Option::is_none")]
    pub sensitive_media_detection_sensitivity: Option<SensitiveMediaDetectionSensitivity>,
    #[serde(rename = "setSensitiveFlagAutomatically", skip_serializing_if = "Option::is_none")]
    pub set_sensitive_flag_automatically: Option<bool>,
    #[serde(rename = "enableSensitiveMediaDetectionForVideos", skip_serializing_if = "Option::is_none")]
    pub enable_sensitive_media_detection_for_videos: Option<bool>,
    #[serde(rename = "proxyAccountId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub proxy_account_id: Option<Option<String>>,
    #[serde(rename = "maintainerName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub maintainer_name: Option<Option<String>>,
    #[serde(rename = "maintainerEmail", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub maintainer_email: Option<Option<String>>,
    #[serde(rename = "langs", skip_serializing_if = "Option::is_none")]
    pub langs: Option<Vec<String>>,
    #[serde(rename = "deeplAuthKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub deepl_auth_key: Option<Option<String>>,
    #[serde(rename = "deeplIsPro", skip_serializing_if = "Option::is_none")]
    pub deepl_is_pro: Option<bool>,
    #[serde(rename = "enableEmail", skip_serializing_if = "Option::is_none")]
    pub enable_email: Option<bool>,
    #[serde(rename = "email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email: Option<Option<String>>,
    #[serde(rename = "smtpSecure", skip_serializing_if = "Option::is_none")]
    pub smtp_secure: Option<bool>,
    #[serde(rename = "smtpHost", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub smtp_host: Option<Option<String>>,
    #[serde(rename = "smtpPort", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub smtp_port: Option<Option<i32>>,
    #[serde(rename = "smtpUser", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub smtp_user: Option<Option<String>>,
    #[serde(rename = "smtpPass", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub smtp_pass: Option<Option<String>>,
    #[serde(rename = "enableServiceWorker", skip_serializing_if = "Option::is_none")]
    pub enable_service_worker: Option<bool>,
    #[serde(rename = "swPublicKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sw_public_key: Option<Option<String>>,
    #[serde(rename = "swPrivateKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sw_private_key: Option<Option<String>>,
    #[serde(rename = "tosUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tos_url: Option<Option<String>>,
    #[serde(rename = "repositoryUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub repository_url: Option<Option<String>>,
    #[serde(rename = "feedbackUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub feedback_url: Option<Option<String>>,
    #[serde(rename = "impressumUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub impressum_url: Option<Option<String>>,
    #[serde(rename = "privacyPolicyUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub privacy_policy_url: Option<Option<String>>,
    #[serde(rename = "inquiryUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub inquiry_url: Option<Option<String>>,
    #[serde(rename = "useObjectStorage", skip_serializing_if = "Option::is_none")]
    pub use_object_storage: Option<bool>,
    #[serde(rename = "objectStorageBaseUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub object_storage_base_url: Option<Option<String>>,
    #[serde(rename = "objectStorageBucket", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub object_storage_bucket: Option<Option<String>>,
    #[serde(rename = "objectStoragePrefix", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub object_storage_prefix: Option<Option<String>>,
    #[serde(rename = "objectStorageEndpoint", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub object_storage_endpoint: Option<Option<String>>,
    #[serde(rename = "objectStorageRegion", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub object_storage_region: Option<Option<String>>,
    #[serde(rename = "objectStoragePort", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub object_storage_port: Option<Option<i32>>,
    #[serde(rename = "objectStorageAccessKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub object_storage_access_key: Option<Option<String>>,
    #[serde(rename = "objectStorageSecretKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub object_storage_secret_key: Option<Option<String>>,
    #[serde(rename = "objectStorageUseSSL", skip_serializing_if = "Option::is_none")]
    pub object_storage_use_ssl: Option<bool>,
    #[serde(rename = "objectStorageUseProxy", skip_serializing_if = "Option::is_none")]
    pub object_storage_use_proxy: Option<bool>,
    #[serde(rename = "objectStorageSetPublicRead", skip_serializing_if = "Option::is_none")]
    pub object_storage_set_public_read: Option<bool>,
    #[serde(rename = "objectStorageS3ForcePathStyle", skip_serializing_if = "Option::is_none")]
    pub object_storage_s3_force_path_style: Option<bool>,
    #[serde(rename = "enableIpLogging", skip_serializing_if = "Option::is_none")]
    pub enable_ip_logging: Option<bool>,
    #[serde(rename = "enableActiveEmailValidation", skip_serializing_if = "Option::is_none")]
    pub enable_active_email_validation: Option<bool>,
    #[serde(rename = "enableVerifymailApi", skip_serializing_if = "Option::is_none")]
    pub enable_verifymail_api: Option<bool>,
    #[serde(rename = "verifymailAuthKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub verifymail_auth_key: Option<Option<String>>,
    #[serde(rename = "enableTruemailApi", skip_serializing_if = "Option::is_none")]
    pub enable_truemail_api: Option<bool>,
    #[serde(rename = "truemailInstance", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub truemail_instance: Option<Option<String>>,
    #[serde(rename = "truemailAuthKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub truemail_auth_key: Option<Option<String>>,
    #[serde(rename = "enableChartsForRemoteUser", skip_serializing_if = "Option::is_none")]
    pub enable_charts_for_remote_user: Option<bool>,
    #[serde(rename = "enableChartsForFederatedInstances", skip_serializing_if = "Option::is_none")]
    pub enable_charts_for_federated_instances: Option<bool>,
    #[serde(rename = "enableServerMachineStats", skip_serializing_if = "Option::is_none")]
    pub enable_server_machine_stats: Option<bool>,
    #[serde(rename = "enableIdenticonGeneration", skip_serializing_if = "Option::is_none")]
    pub enable_identicon_generation: Option<bool>,
    #[serde(rename = "serverRules", skip_serializing_if = "Option::is_none")]
    pub server_rules: Option<Vec<String>>,
    #[serde(rename = "bannedEmailDomains", skip_serializing_if = "Option::is_none")]
    pub banned_email_domains: Option<Vec<String>>,
    #[serde(rename = "preservedUsernames", skip_serializing_if = "Option::is_none")]
    pub preserved_usernames: Option<Vec<String>>,
    #[serde(rename = "manifestJsonOverride", skip_serializing_if = "Option::is_none")]
    pub manifest_json_override: Option<String>,
    #[serde(rename = "enableFanoutTimeline", skip_serializing_if = "Option::is_none")]
    pub enable_fanout_timeline: Option<bool>,
    #[serde(rename = "enableFanoutTimelineDbFallback", skip_serializing_if = "Option::is_none")]
    pub enable_fanout_timeline_db_fallback: Option<bool>,
    #[serde(rename = "perLocalUserUserTimelineCacheMax", skip_serializing_if = "Option::is_none")]
    pub per_local_user_user_timeline_cache_max: Option<i32>,
    #[serde(rename = "perRemoteUserUserTimelineCacheMax", skip_serializing_if = "Option::is_none")]
    pub per_remote_user_user_timeline_cache_max: Option<i32>,
    #[serde(rename = "perUserHomeTimelineCacheMax", skip_serializing_if = "Option::is_none")]
    pub per_user_home_timeline_cache_max: Option<i32>,
    #[serde(rename = "perUserListTimelineCacheMax", skip_serializing_if = "Option::is_none")]
    pub per_user_list_timeline_cache_max: Option<i32>,
    #[serde(rename = "enableReactionsBuffering", skip_serializing_if = "Option::is_none")]
    pub enable_reactions_buffering: Option<bool>,
    #[serde(rename = "notesPerOneAd", skip_serializing_if = "Option::is_none")]
    pub notes_per_one_ad: Option<i32>,
    #[serde(rename = "silencedHosts", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub silenced_hosts: Option<Option<Vec<String>>>,
    #[serde(rename = "mediaSilencedHosts", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub media_silenced_hosts: Option<Option<Vec<String>>>,
    /// [Deprecated] Use \"urlPreviewSummaryProxyUrl\" instead.
    #[serde(rename = "summalyProxy", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub summaly_proxy: Option<Option<String>>,
    #[serde(rename = "urlPreviewEnabled", skip_serializing_if = "Option::is_none")]
    pub url_preview_enabled: Option<bool>,
    #[serde(rename = "urlPreviewTimeout", skip_serializing_if = "Option::is_none")]
    pub url_preview_timeout: Option<i32>,
    #[serde(rename = "urlPreviewMaximumContentLength", skip_serializing_if = "Option::is_none")]
    pub url_preview_maximum_content_length: Option<i32>,
    #[serde(rename = "urlPreviewRequireContentLength", skip_serializing_if = "Option::is_none")]
    pub url_preview_require_content_length: Option<bool>,
    #[serde(rename = "urlPreviewUserAgent", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub url_preview_user_agent: Option<Option<String>>,
    #[serde(rename = "urlPreviewSummaryProxyUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub url_preview_summary_proxy_url: Option<Option<String>>,
}

impl AdminUpdateMetaRequest {
    pub fn new() -> AdminUpdateMetaRequest {
        AdminUpdateMetaRequest {
            disable_registration: None,
            pinned_users: None,
            hidden_tags: None,
            blocked_hosts: None,
            sensitive_words: None,
            prohibited_words: None,
            theme_color: None,
            mascot_image_url: None,
            banner_url: None,
            server_error_image_url: None,
            info_image_url: None,
            not_found_image_url: None,
            icon_url: None,
            app192_icon_url: None,
            app512_icon_url: None,
            background_image_url: None,
            logo_image_url: None,
            name: None,
            short_name: None,
            description: None,
            default_light_theme: None,
            default_dark_theme: None,
            cache_remote_files: None,
            cache_remote_sensitive_files: None,
            email_required_for_signup: None,
            enable_hcaptcha: None,
            hcaptcha_site_key: None,
            hcaptcha_secret_key: None,
            enable_mcaptcha: None,
            mcaptcha_site_key: None,
            mcaptcha_instance_url: None,
            mcaptcha_secret_key: None,
            enable_recaptcha: None,
            recaptcha_site_key: None,
            recaptcha_secret_key: None,
            enable_turnstile: None,
            turnstile_site_key: None,
            turnstile_secret_key: None,
            sensitive_media_detection: None,
            sensitive_media_detection_sensitivity: None,
            set_sensitive_flag_automatically: None,
            enable_sensitive_media_detection_for_videos: None,
            proxy_account_id: None,
            maintainer_name: None,
            maintainer_email: None,
            langs: None,
            deepl_auth_key: None,
            deepl_is_pro: None,
            enable_email: None,
            email: None,
            smtp_secure: None,
            smtp_host: None,
            smtp_port: None,
            smtp_user: None,
            smtp_pass: None,
            enable_service_worker: None,
            sw_public_key: None,
            sw_private_key: None,
            tos_url: None,
            repository_url: None,
            feedback_url: None,
            impressum_url: None,
            privacy_policy_url: None,
            inquiry_url: None,
            use_object_storage: None,
            object_storage_base_url: None,
            object_storage_bucket: None,
            object_storage_prefix: None,
            object_storage_endpoint: None,
            object_storage_region: None,
            object_storage_port: None,
            object_storage_access_key: None,
            object_storage_secret_key: None,
            object_storage_use_ssl: None,
            object_storage_use_proxy: None,
            object_storage_set_public_read: None,
            object_storage_s3_force_path_style: None,
            enable_ip_logging: None,
            enable_active_email_validation: None,
            enable_verifymail_api: None,
            verifymail_auth_key: None,
            enable_truemail_api: None,
            truemail_instance: None,
            truemail_auth_key: None,
            enable_charts_for_remote_user: None,
            enable_charts_for_federated_instances: None,
            enable_server_machine_stats: None,
            enable_identicon_generation: None,
            server_rules: None,
            banned_email_domains: None,
            preserved_usernames: None,
            manifest_json_override: None,
            enable_fanout_timeline: None,
            enable_fanout_timeline_db_fallback: None,
            per_local_user_user_timeline_cache_max: None,
            per_remote_user_user_timeline_cache_max: None,
            per_user_home_timeline_cache_max: None,
            per_user_list_timeline_cache_max: None,
            enable_reactions_buffering: None,
            notes_per_one_ad: None,
            silenced_hosts: None,
            media_silenced_hosts: None,
            summaly_proxy: None,
            url_preview_enabled: None,
            url_preview_timeout: None,
            url_preview_maximum_content_length: None,
            url_preview_require_content_length: None,
            url_preview_user_agent: None,
            url_preview_summary_proxy_url: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SensitiveMediaDetection {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "local")]
    Local,
    #[serde(rename = "remote")]
    Remote,
}

impl Default for SensitiveMediaDetection {
    fn default() -> SensitiveMediaDetection {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SensitiveMediaDetectionSensitivity {
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "veryLow")]
    VeryLow,
    #[serde(rename = "veryHigh")]
    VeryHigh,
}

impl Default for SensitiveMediaDetectionSensitivity {
    fn default() -> SensitiveMediaDetectionSensitivity {
        Self::Medium
    }
}

