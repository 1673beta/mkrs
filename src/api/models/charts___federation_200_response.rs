/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChartsFederation200Response {
    #[serde(rename = "deliveredInstances")]
    pub delivered_instances: Vec<f64>,
    #[serde(rename = "inboxInstances")]
    pub inbox_instances: Vec<f64>,
    #[serde(rename = "stalled")]
    pub stalled: Vec<f64>,
    #[serde(rename = "sub")]
    pub sub: Vec<f64>,
    #[serde(rename = "pub")]
    pub r#pub: Vec<f64>,
    #[serde(rename = "pubsub")]
    pub pubsub: Vec<f64>,
    #[serde(rename = "subActive")]
    pub sub_active: Vec<f64>,
    #[serde(rename = "pubActive")]
    pub pub_active: Vec<f64>,
}

impl ChartsFederation200Response {
    pub fn new(delivered_instances: Vec<f64>, inbox_instances: Vec<f64>, stalled: Vec<f64>, sub: Vec<f64>, r#pub: Vec<f64>, pubsub: Vec<f64>, sub_active: Vec<f64>, pub_active: Vec<f64>) -> ChartsFederation200Response {
        ChartsFederation200Response {
            delivered_instances,
            inbox_instances,
            stalled,
            sub,
            r#pub,
            pubsub,
            sub_active,
            pub_active,
        }
    }
}

