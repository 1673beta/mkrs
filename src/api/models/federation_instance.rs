/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FederationInstance {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "firstRetrievedAt")]
    pub first_retrieved_at: String,
    #[serde(rename = "host")]
    pub host: String,
    #[serde(rename = "usersCount")]
    pub users_count: f64,
    #[serde(rename = "notesCount")]
    pub notes_count: f64,
    #[serde(rename = "followingCount")]
    pub following_count: f64,
    #[serde(rename = "followersCount")]
    pub followers_count: f64,
    #[serde(rename = "isNotResponding")]
    pub is_not_responding: bool,
    #[serde(rename = "isSuspended")]
    pub is_suspended: bool,
    #[serde(rename = "suspensionState")]
    pub suspension_state: SuspensionState,
    #[serde(rename = "isBlocked")]
    pub is_blocked: bool,
    #[serde(rename = "softwareName", deserialize_with = "Option::deserialize")]
    pub software_name: Option<String>,
    #[serde(rename = "softwareVersion", deserialize_with = "Option::deserialize")]
    pub software_version: Option<String>,
    #[serde(rename = "openRegistrations", deserialize_with = "Option::deserialize")]
    pub open_registrations: Option<bool>,
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<String>,
    #[serde(rename = "description", deserialize_with = "Option::deserialize")]
    pub description: Option<String>,
    #[serde(rename = "maintainerName", deserialize_with = "Option::deserialize")]
    pub maintainer_name: Option<String>,
    #[serde(rename = "maintainerEmail", deserialize_with = "Option::deserialize")]
    pub maintainer_email: Option<String>,
    #[serde(rename = "isSilenced")]
    pub is_silenced: bool,
    #[serde(rename = "isMediaSilenced")]
    pub is_media_silenced: bool,
    #[serde(rename = "iconUrl", deserialize_with = "Option::deserialize")]
    pub icon_url: Option<String>,
    #[serde(rename = "faviconUrl", deserialize_with = "Option::deserialize")]
    pub favicon_url: Option<String>,
    #[serde(rename = "themeColor", deserialize_with = "Option::deserialize")]
    pub theme_color: Option<String>,
    #[serde(rename = "infoUpdatedAt", deserialize_with = "Option::deserialize")]
    pub info_updated_at: Option<String>,
    #[serde(rename = "latestRequestReceivedAt", deserialize_with = "Option::deserialize")]
    pub latest_request_received_at: Option<String>,
    #[serde(rename = "moderationNote", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub moderation_note: Option<Option<String>>,
}

impl FederationInstance {
    pub fn new(id: String, first_retrieved_at: String, host: String, users_count: f64, notes_count: f64, following_count: f64, followers_count: f64, is_not_responding: bool, is_suspended: bool, suspension_state: SuspensionState, is_blocked: bool, software_name: Option<String>, software_version: Option<String>, open_registrations: Option<bool>, name: Option<String>, description: Option<String>, maintainer_name: Option<String>, maintainer_email: Option<String>, is_silenced: bool, is_media_silenced: bool, icon_url: Option<String>, favicon_url: Option<String>, theme_color: Option<String>, info_updated_at: Option<String>, latest_request_received_at: Option<String>) -> FederationInstance {
        FederationInstance {
            id,
            first_retrieved_at,
            host,
            users_count,
            notes_count,
            following_count,
            followers_count,
            is_not_responding,
            is_suspended,
            suspension_state,
            is_blocked,
            software_name,
            software_version,
            open_registrations,
            name,
            description,
            maintainer_name,
            maintainer_email,
            is_silenced,
            is_media_silenced,
            icon_url,
            favicon_url,
            theme_color,
            info_updated_at,
            latest_request_received_at,
            moderation_note: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SuspensionState {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "manuallySuspended")]
    ManuallySuspended,
    #[serde(rename = "goneSuspended")]
    GoneSuspended,
    #[serde(rename = "autoSuspendedForNotResponding")]
    AutoSuspendedForNotResponding,
}

impl Default for SuspensionState {
    fn default() -> SuspensionState {
        Self::None
    }
}

