/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminServerInfo200Response {
    #[serde(rename = "machine")]
    pub machine: String,
    #[serde(rename = "os")]
    pub os: String,
    #[serde(rename = "node")]
    pub node: String,
    #[serde(rename = "psql")]
    pub psql: String,
    #[serde(rename = "cpu")]
    pub cpu: Box<models::AdminServerInfo200ResponseCpu>,
    #[serde(rename = "mem")]
    pub mem: Box<models::AdminServerInfo200ResponseMem>,
    #[serde(rename = "fs")]
    pub fs: Box<models::AdminServerInfo200ResponseFs>,
    #[serde(rename = "net")]
    pub net: Box<models::AdminServerInfo200ResponseNet>,
}

impl AdminServerInfo200Response {
    pub fn new(machine: String, os: String, node: String, psql: String, cpu: models::AdminServerInfo200ResponseCpu, mem: models::AdminServerInfo200ResponseMem, fs: models::AdminServerInfo200ResponseFs, net: models::AdminServerInfo200ResponseNet) -> AdminServerInfo200Response {
        AdminServerInfo200Response {
            machine,
            os,
            node,
            psql,
            cpu: Box::new(cpu),
            mem: Box::new(mem),
            fs: Box::new(fs),
            net: Box::new(net),
        }
    }
}

