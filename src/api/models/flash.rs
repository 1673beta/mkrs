/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Flash {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    #[serde(rename = "userId")]
    pub user_id: String,
    #[serde(rename = "user")]
    pub user: models::UserLite,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "summary")]
    pub summary: String,
    #[serde(rename = "script")]
    pub script: String,
    #[serde(rename = "visibility")]
    pub visibility: Visibility,
    #[serde(rename = "likedCount", deserialize_with = "Option::deserialize")]
    pub liked_count: Option<f64>,
    #[serde(rename = "isLiked", skip_serializing_if = "Option::is_none")]
    pub is_liked: Option<bool>,
}

impl Flash {
    pub fn new(id: String, created_at: String, updated_at: String, user_id: String, user: models::UserLite, title: String, summary: String, script: String, visibility: Visibility, liked_count: Option<f64>) -> Flash {
        Flash {
            id,
            created_at,
            updated_at,
            user_id,
            user,
            title,
            summary,
            script,
            visibility,
            liked_count,
            is_liked: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Visibility {
    #[serde(rename = "private")]
    Private,
    #[serde(rename = "public")]
    Public,
}

impl Default for Visibility {
    fn default() -> Visibility {
        Self::Private
    }
}

