/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminAnnouncementsUpdateRequest {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(rename = "imageUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<Option<String>>,
    #[serde(rename = "icon", skip_serializing_if = "Option::is_none")]
    pub icon: Option<Icon>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<Display>,
    #[serde(rename = "forExistingUsers", skip_serializing_if = "Option::is_none")]
    pub for_existing_users: Option<bool>,
    #[serde(rename = "silence", skip_serializing_if = "Option::is_none")]
    pub silence: Option<bool>,
    #[serde(rename = "needConfirmationToRead", skip_serializing_if = "Option::is_none")]
    pub need_confirmation_to_read: Option<bool>,
    #[serde(rename = "isActive", skip_serializing_if = "Option::is_none")]
    pub is_active: Option<bool>,
}

impl AdminAnnouncementsUpdateRequest {
    pub fn new(id: String) -> AdminAnnouncementsUpdateRequest {
        AdminAnnouncementsUpdateRequest {
            id,
            title: None,
            text: None,
            image_url: None,
            icon: None,
            display: None,
            for_existing_users: None,
            silence: None,
            need_confirmation_to_read: None,
            is_active: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Icon {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "success")]
    Success,
}

impl Default for Icon {
    fn default() -> Icon {
        Self::Info
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Display {
    #[serde(rename = "normal")]
    Normal,
    #[serde(rename = "banner")]
    Banner,
    #[serde(rename = "dialog")]
    Dialog,
}

impl Default for Display {
    fn default() -> Display {
        Self::Normal
    }
}

