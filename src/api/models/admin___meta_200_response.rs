/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminMeta200Response {
    #[serde(rename = "cacheRemoteFiles")]
    pub cache_remote_files: bool,
    #[serde(rename = "cacheRemoteSensitiveFiles")]
    pub cache_remote_sensitive_files: bool,
    #[serde(rename = "emailRequiredForSignup")]
    pub email_required_for_signup: bool,
    #[serde(rename = "enableHcaptcha")]
    pub enable_hcaptcha: bool,
    #[serde(rename = "hcaptchaSiteKey", deserialize_with = "Option::deserialize")]
    pub hcaptcha_site_key: Option<String>,
    #[serde(rename = "enableMcaptcha")]
    pub enable_mcaptcha: bool,
    #[serde(rename = "mcaptchaSiteKey", deserialize_with = "Option::deserialize")]
    pub mcaptcha_site_key: Option<String>,
    #[serde(rename = "mcaptchaInstanceUrl", deserialize_with = "Option::deserialize")]
    pub mcaptcha_instance_url: Option<String>,
    #[serde(rename = "enableRecaptcha")]
    pub enable_recaptcha: bool,
    #[serde(rename = "recaptchaSiteKey", deserialize_with = "Option::deserialize")]
    pub recaptcha_site_key: Option<String>,
    #[serde(rename = "enableTurnstile")]
    pub enable_turnstile: bool,
    #[serde(rename = "turnstileSiteKey", deserialize_with = "Option::deserialize")]
    pub turnstile_site_key: Option<String>,
    #[serde(rename = "swPublickey", deserialize_with = "Option::deserialize")]
    pub sw_publickey: Option<String>,
    #[serde(rename = "mascotImageUrl", deserialize_with = "Option::deserialize")]
    pub mascot_image_url: Option<String>,
    #[serde(rename = "bannerUrl", deserialize_with = "Option::deserialize")]
    pub banner_url: Option<String>,
    #[serde(rename = "serverErrorImageUrl", deserialize_with = "Option::deserialize")]
    pub server_error_image_url: Option<String>,
    #[serde(rename = "infoImageUrl", deserialize_with = "Option::deserialize")]
    pub info_image_url: Option<String>,
    #[serde(rename = "notFoundImageUrl", deserialize_with = "Option::deserialize")]
    pub not_found_image_url: Option<String>,
    #[serde(rename = "iconUrl", deserialize_with = "Option::deserialize")]
    pub icon_url: Option<String>,
    #[serde(rename = "app192IconUrl", deserialize_with = "Option::deserialize")]
    pub app192_icon_url: Option<String>,
    #[serde(rename = "app512IconUrl", deserialize_with = "Option::deserialize")]
    pub app512_icon_url: Option<String>,
    #[serde(rename = "enableEmail")]
    pub enable_email: bool,
    #[serde(rename = "enableServiceWorker")]
    pub enable_service_worker: bool,
    #[serde(rename = "translatorAvailable")]
    pub translator_available: bool,
    #[serde(rename = "silencedHosts", skip_serializing_if = "Option::is_none")]
    pub silenced_hosts: Option<Vec<String>>,
    #[serde(rename = "mediaSilencedHosts")]
    pub media_silenced_hosts: Vec<String>,
    #[serde(rename = "pinnedUsers")]
    pub pinned_users: Vec<String>,
    #[serde(rename = "hiddenTags")]
    pub hidden_tags: Vec<String>,
    #[serde(rename = "blockedHosts")]
    pub blocked_hosts: Vec<String>,
    #[serde(rename = "sensitiveWords")]
    pub sensitive_words: Vec<String>,
    #[serde(rename = "prohibitedWords")]
    pub prohibited_words: Vec<String>,
    #[serde(rename = "bannedEmailDomains", skip_serializing_if = "Option::is_none")]
    pub banned_email_domains: Option<Vec<String>>,
    #[serde(rename = "preservedUsernames")]
    pub preserved_usernames: Vec<String>,
    #[serde(rename = "hcaptchaSecretKey", deserialize_with = "Option::deserialize")]
    pub hcaptcha_secret_key: Option<String>,
    #[serde(rename = "mcaptchaSecretKey", deserialize_with = "Option::deserialize")]
    pub mcaptcha_secret_key: Option<String>,
    #[serde(rename = "recaptchaSecretKey", deserialize_with = "Option::deserialize")]
    pub recaptcha_secret_key: Option<String>,
    #[serde(rename = "turnstileSecretKey", deserialize_with = "Option::deserialize")]
    pub turnstile_secret_key: Option<String>,
    #[serde(rename = "sensitiveMediaDetection")]
    pub sensitive_media_detection: String,
    #[serde(rename = "sensitiveMediaDetectionSensitivity")]
    pub sensitive_media_detection_sensitivity: String,
    #[serde(rename = "setSensitiveFlagAutomatically")]
    pub set_sensitive_flag_automatically: bool,
    #[serde(rename = "enableSensitiveMediaDetectionForVideos")]
    pub enable_sensitive_media_detection_for_videos: bool,
    #[serde(rename = "proxyAccountId", deserialize_with = "Option::deserialize")]
    pub proxy_account_id: Option<String>,
    #[serde(rename = "email", deserialize_with = "Option::deserialize")]
    pub email: Option<String>,
    #[serde(rename = "smtpSecure")]
    pub smtp_secure: bool,
    #[serde(rename = "smtpHost", deserialize_with = "Option::deserialize")]
    pub smtp_host: Option<String>,
    #[serde(rename = "smtpPort", deserialize_with = "Option::deserialize")]
    pub smtp_port: Option<f64>,
    #[serde(rename = "smtpUser", deserialize_with = "Option::deserialize")]
    pub smtp_user: Option<String>,
    #[serde(rename = "smtpPass", deserialize_with = "Option::deserialize")]
    pub smtp_pass: Option<String>,
    #[serde(rename = "swPrivateKey", deserialize_with = "Option::deserialize")]
    pub sw_private_key: Option<String>,
    #[serde(rename = "useObjectStorage")]
    pub use_object_storage: bool,
    #[serde(rename = "objectStorageBaseUrl", deserialize_with = "Option::deserialize")]
    pub object_storage_base_url: Option<String>,
    #[serde(rename = "objectStorageBucket", deserialize_with = "Option::deserialize")]
    pub object_storage_bucket: Option<String>,
    #[serde(rename = "objectStoragePrefix", deserialize_with = "Option::deserialize")]
    pub object_storage_prefix: Option<String>,
    #[serde(rename = "objectStorageEndpoint", deserialize_with = "Option::deserialize")]
    pub object_storage_endpoint: Option<String>,
    #[serde(rename = "objectStorageRegion", deserialize_with = "Option::deserialize")]
    pub object_storage_region: Option<String>,
    #[serde(rename = "objectStoragePort", deserialize_with = "Option::deserialize")]
    pub object_storage_port: Option<f64>,
    #[serde(rename = "objectStorageAccessKey", deserialize_with = "Option::deserialize")]
    pub object_storage_access_key: Option<String>,
    #[serde(rename = "objectStorageSecretKey", deserialize_with = "Option::deserialize")]
    pub object_storage_secret_key: Option<String>,
    #[serde(rename = "objectStorageUseSSL")]
    pub object_storage_use_ssl: bool,
    #[serde(rename = "objectStorageUseProxy")]
    pub object_storage_use_proxy: bool,
    #[serde(rename = "objectStorageSetPublicRead")]
    pub object_storage_set_public_read: bool,
    #[serde(rename = "enableIpLogging")]
    pub enable_ip_logging: bool,
    #[serde(rename = "enableActiveEmailValidation")]
    pub enable_active_email_validation: bool,
    #[serde(rename = "enableVerifymailApi")]
    pub enable_verifymail_api: bool,
    #[serde(rename = "verifymailAuthKey", deserialize_with = "Option::deserialize")]
    pub verifymail_auth_key: Option<String>,
    #[serde(rename = "enableTruemailApi")]
    pub enable_truemail_api: bool,
    #[serde(rename = "truemailInstance", deserialize_with = "Option::deserialize")]
    pub truemail_instance: Option<String>,
    #[serde(rename = "truemailAuthKey", deserialize_with = "Option::deserialize")]
    pub truemail_auth_key: Option<String>,
    #[serde(rename = "enableChartsForRemoteUser")]
    pub enable_charts_for_remote_user: bool,
    #[serde(rename = "enableChartsForFederatedInstances")]
    pub enable_charts_for_federated_instances: bool,
    #[serde(rename = "enableServerMachineStats")]
    pub enable_server_machine_stats: bool,
    #[serde(rename = "enableIdenticonGeneration")]
    pub enable_identicon_generation: bool,
    #[serde(rename = "manifestJsonOverride")]
    pub manifest_json_override: String,
    #[serde(rename = "policies")]
    pub policies: serde_json::Value,
    #[serde(rename = "enableFanoutTimeline")]
    pub enable_fanout_timeline: bool,
    #[serde(rename = "enableFanoutTimelineDbFallback")]
    pub enable_fanout_timeline_db_fallback: bool,
    #[serde(rename = "perLocalUserUserTimelineCacheMax")]
    pub per_local_user_user_timeline_cache_max: f64,
    #[serde(rename = "perRemoteUserUserTimelineCacheMax")]
    pub per_remote_user_user_timeline_cache_max: f64,
    #[serde(rename = "perUserHomeTimelineCacheMax")]
    pub per_user_home_timeline_cache_max: f64,
    #[serde(rename = "perUserListTimelineCacheMax")]
    pub per_user_list_timeline_cache_max: f64,
    #[serde(rename = "enableReactionsBuffering")]
    pub enable_reactions_buffering: bool,
    #[serde(rename = "notesPerOneAd")]
    pub notes_per_one_ad: f64,
    #[serde(rename = "backgroundImageUrl", deserialize_with = "Option::deserialize")]
    pub background_image_url: Option<String>,
    #[serde(rename = "deeplAuthKey", deserialize_with = "Option::deserialize")]
    pub deepl_auth_key: Option<String>,
    #[serde(rename = "deeplIsPro")]
    pub deepl_is_pro: bool,
    #[serde(rename = "defaultDarkTheme", deserialize_with = "Option::deserialize")]
    pub default_dark_theme: Option<String>,
    #[serde(rename = "defaultLightTheme", deserialize_with = "Option::deserialize")]
    pub default_light_theme: Option<String>,
    #[serde(rename = "description", deserialize_with = "Option::deserialize")]
    pub description: Option<String>,
    #[serde(rename = "disableRegistration")]
    pub disable_registration: bool,
    #[serde(rename = "impressumUrl", deserialize_with = "Option::deserialize")]
    pub impressum_url: Option<String>,
    #[serde(rename = "maintainerEmail", deserialize_with = "Option::deserialize")]
    pub maintainer_email: Option<String>,
    #[serde(rename = "maintainerName", deserialize_with = "Option::deserialize")]
    pub maintainer_name: Option<String>,
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<String>,
    #[serde(rename = "shortName", deserialize_with = "Option::deserialize")]
    pub short_name: Option<String>,
    #[serde(rename = "objectStorageS3ForcePathStyle")]
    pub object_storage_s3_force_path_style: bool,
    #[serde(rename = "privacyPolicyUrl", deserialize_with = "Option::deserialize")]
    pub privacy_policy_url: Option<String>,
    #[serde(rename = "inquiryUrl", deserialize_with = "Option::deserialize")]
    pub inquiry_url: Option<String>,
    #[serde(rename = "repositoryUrl", deserialize_with = "Option::deserialize")]
    pub repository_url: Option<String>,
    /// [Deprecated] Use \"urlPreviewSummaryProxyUrl\" instead.
    #[serde(rename = "summalyProxy", deserialize_with = "Option::deserialize")]
    pub summaly_proxy: Option<String>,
    #[serde(rename = "themeColor", deserialize_with = "Option::deserialize")]
    pub theme_color: Option<String>,
    #[serde(rename = "tosUrl", deserialize_with = "Option::deserialize")]
    pub tos_url: Option<String>,
    #[serde(rename = "uri")]
    pub uri: String,
    #[serde(rename = "version")]
    pub version: String,
    #[serde(rename = "urlPreviewEnabled")]
    pub url_preview_enabled: bool,
    #[serde(rename = "urlPreviewTimeout")]
    pub url_preview_timeout: f64,
    #[serde(rename = "urlPreviewMaximumContentLength")]
    pub url_preview_maximum_content_length: f64,
    #[serde(rename = "urlPreviewRequireContentLength")]
    pub url_preview_require_content_length: bool,
    #[serde(rename = "urlPreviewUserAgent", deserialize_with = "Option::deserialize")]
    pub url_preview_user_agent: Option<String>,
    #[serde(rename = "urlPreviewSummaryProxyUrl", deserialize_with = "Option::deserialize")]
    pub url_preview_summary_proxy_url: Option<String>,
}

impl AdminMeta200Response {
    pub fn new(cache_remote_files: bool, cache_remote_sensitive_files: bool, email_required_for_signup: bool, enable_hcaptcha: bool, hcaptcha_site_key: Option<String>, enable_mcaptcha: bool, mcaptcha_site_key: Option<String>, mcaptcha_instance_url: Option<String>, enable_recaptcha: bool, recaptcha_site_key: Option<String>, enable_turnstile: bool, turnstile_site_key: Option<String>, sw_publickey: Option<String>, mascot_image_url: Option<String>, banner_url: Option<String>, server_error_image_url: Option<String>, info_image_url: Option<String>, not_found_image_url: Option<String>, icon_url: Option<String>, app192_icon_url: Option<String>, app512_icon_url: Option<String>, enable_email: bool, enable_service_worker: bool, translator_available: bool, media_silenced_hosts: Vec<String>, pinned_users: Vec<String>, hidden_tags: Vec<String>, blocked_hosts: Vec<String>, sensitive_words: Vec<String>, prohibited_words: Vec<String>, preserved_usernames: Vec<String>, hcaptcha_secret_key: Option<String>, mcaptcha_secret_key: Option<String>, recaptcha_secret_key: Option<String>, turnstile_secret_key: Option<String>, sensitive_media_detection: String, sensitive_media_detection_sensitivity: String, set_sensitive_flag_automatically: bool, enable_sensitive_media_detection_for_videos: bool, proxy_account_id: Option<String>, email: Option<String>, smtp_secure: bool, smtp_host: Option<String>, smtp_port: Option<f64>, smtp_user: Option<String>, smtp_pass: Option<String>, sw_private_key: Option<String>, use_object_storage: bool, object_storage_base_url: Option<String>, object_storage_bucket: Option<String>, object_storage_prefix: Option<String>, object_storage_endpoint: Option<String>, object_storage_region: Option<String>, object_storage_port: Option<f64>, object_storage_access_key: Option<String>, object_storage_secret_key: Option<String>, object_storage_use_ssl: bool, object_storage_use_proxy: bool, object_storage_set_public_read: bool, enable_ip_logging: bool, enable_active_email_validation: bool, enable_verifymail_api: bool, verifymail_auth_key: Option<String>, enable_truemail_api: bool, truemail_instance: Option<String>, truemail_auth_key: Option<String>, enable_charts_for_remote_user: bool, enable_charts_for_federated_instances: bool, enable_server_machine_stats: bool, enable_identicon_generation: bool, manifest_json_override: String, policies: serde_json::Value, enable_fanout_timeline: bool, enable_fanout_timeline_db_fallback: bool, per_local_user_user_timeline_cache_max: f64, per_remote_user_user_timeline_cache_max: f64, per_user_home_timeline_cache_max: f64, per_user_list_timeline_cache_max: f64, enable_reactions_buffering: bool, notes_per_one_ad: f64, background_image_url: Option<String>, deepl_auth_key: Option<String>, deepl_is_pro: bool, default_dark_theme: Option<String>, default_light_theme: Option<String>, description: Option<String>, disable_registration: bool, impressum_url: Option<String>, maintainer_email: Option<String>, maintainer_name: Option<String>, name: Option<String>, short_name: Option<String>, object_storage_s3_force_path_style: bool, privacy_policy_url: Option<String>, inquiry_url: Option<String>, repository_url: Option<String>, summaly_proxy: Option<String>, theme_color: Option<String>, tos_url: Option<String>, uri: String, version: String, url_preview_enabled: bool, url_preview_timeout: f64, url_preview_maximum_content_length: f64, url_preview_require_content_length: bool, url_preview_user_agent: Option<String>, url_preview_summary_proxy_url: Option<String>) -> AdminMeta200Response {
        AdminMeta200Response {
            cache_remote_files,
            cache_remote_sensitive_files,
            email_required_for_signup,
            enable_hcaptcha,
            hcaptcha_site_key,
            enable_mcaptcha,
            mcaptcha_site_key,
            mcaptcha_instance_url,
            enable_recaptcha,
            recaptcha_site_key,
            enable_turnstile,
            turnstile_site_key,
            sw_publickey,
            mascot_image_url,
            banner_url,
            server_error_image_url,
            info_image_url,
            not_found_image_url,
            icon_url,
            app192_icon_url,
            app512_icon_url,
            enable_email,
            enable_service_worker,
            translator_available,
            silenced_hosts: None,
            media_silenced_hosts,
            pinned_users,
            hidden_tags,
            blocked_hosts,
            sensitive_words,
            prohibited_words,
            banned_email_domains: None,
            preserved_usernames,
            hcaptcha_secret_key,
            mcaptcha_secret_key,
            recaptcha_secret_key,
            turnstile_secret_key,
            sensitive_media_detection,
            sensitive_media_detection_sensitivity,
            set_sensitive_flag_automatically,
            enable_sensitive_media_detection_for_videos,
            proxy_account_id,
            email,
            smtp_secure,
            smtp_host,
            smtp_port,
            smtp_user,
            smtp_pass,
            sw_private_key,
            use_object_storage,
            object_storage_base_url,
            object_storage_bucket,
            object_storage_prefix,
            object_storage_endpoint,
            object_storage_region,
            object_storage_port,
            object_storage_access_key,
            object_storage_secret_key,
            object_storage_use_ssl,
            object_storage_use_proxy,
            object_storage_set_public_read,
            enable_ip_logging,
            enable_active_email_validation,
            enable_verifymail_api,
            verifymail_auth_key,
            enable_truemail_api,
            truemail_instance,
            truemail_auth_key,
            enable_charts_for_remote_user,
            enable_charts_for_federated_instances,
            enable_server_machine_stats,
            enable_identicon_generation,
            manifest_json_override,
            policies,
            enable_fanout_timeline,
            enable_fanout_timeline_db_fallback,
            per_local_user_user_timeline_cache_max,
            per_remote_user_user_timeline_cache_max,
            per_user_home_timeline_cache_max,
            per_user_list_timeline_cache_max,
            enable_reactions_buffering,
            notes_per_one_ad,
            background_image_url,
            deepl_auth_key,
            deepl_is_pro,
            default_dark_theme,
            default_light_theme,
            description,
            disable_registration,
            impressum_url,
            maintainer_email,
            maintainer_name,
            name,
            short_name,
            object_storage_s3_force_path_style,
            privacy_policy_url,
            inquiry_url,
            repository_url,
            summaly_proxy,
            theme_color,
            tos_url,
            uri,
            version,
            url_preview_enabled,
            url_preview_timeout,
            url_preview_maximum_content_length,
            url_preview_require_content_length,
            url_preview_user_agent,
            url_preview_summary_proxy_url,
        }
    }
}

