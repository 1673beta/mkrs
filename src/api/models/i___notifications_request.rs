/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct INotificationsRequest {
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    #[serde(rename = "sinceId", skip_serializing_if = "Option::is_none")]
    pub since_id: Option<String>,
    #[serde(rename = "untilId", skip_serializing_if = "Option::is_none")]
    pub until_id: Option<String>,
    #[serde(rename = "markAsRead", skip_serializing_if = "Option::is_none")]
    pub mark_as_read: Option<bool>,
    #[serde(rename = "includeTypes", skip_serializing_if = "Option::is_none")]
    pub include_types: Option<Vec<IncludeTypes>>,
    #[serde(rename = "excludeTypes", skip_serializing_if = "Option::is_none")]
    pub exclude_types: Option<Vec<ExcludeTypes>>,
}

impl INotificationsRequest {
    pub fn new() -> INotificationsRequest {
        INotificationsRequest {
            limit: None,
            since_id: None,
            until_id: None,
            mark_as_read: None,
            include_types: None,
            exclude_types: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IncludeTypes {
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "follow")]
    Follow,
    #[serde(rename = "mention")]
    Mention,
    #[serde(rename = "reply")]
    Reply,
    #[serde(rename = "renote")]
    Renote,
    #[serde(rename = "quote")]
    Quote,
    #[serde(rename = "reaction")]
    Reaction,
    #[serde(rename = "pollEnded")]
    PollEnded,
    #[serde(rename = "receiveFollowRequest")]
    ReceiveFollowRequest,
    #[serde(rename = "followRequestAccepted")]
    FollowRequestAccepted,
    #[serde(rename = "roleAssigned")]
    RoleAssigned,
    #[serde(rename = "achievementEarned")]
    AchievementEarned,
    #[serde(rename = "app")]
    App,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "pollVote")]
    PollVote,
    #[serde(rename = "groupInvited")]
    GroupInvited,
}

impl Default for IncludeTypes {
    fn default() -> IncludeTypes {
        Self::Note
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExcludeTypes {
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "follow")]
    Follow,
    #[serde(rename = "mention")]
    Mention,
    #[serde(rename = "reply")]
    Reply,
    #[serde(rename = "renote")]
    Renote,
    #[serde(rename = "quote")]
    Quote,
    #[serde(rename = "reaction")]
    Reaction,
    #[serde(rename = "pollEnded")]
    PollEnded,
    #[serde(rename = "receiveFollowRequest")]
    ReceiveFollowRequest,
    #[serde(rename = "followRequestAccepted")]
    FollowRequestAccepted,
    #[serde(rename = "roleAssigned")]
    RoleAssigned,
    #[serde(rename = "achievementEarned")]
    AchievementEarned,
    #[serde(rename = "app")]
    App,
    #[serde(rename = "test")]
    Test,
    #[serde(rename = "pollVote")]
    PollVote,
    #[serde(rename = "groupInvited")]
    GroupInvited,
}

impl Default for ExcludeTypes {
    fn default() -> ExcludeTypes {
        Self::Note
    }
}

