/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PagesUpdateRequest {
    #[serde(rename = "pageId")]
    pub page_id: String,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "summary", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub summary: Option<Option<String>>,
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<Vec<std::collections::HashMap<String, serde_json::Value>>>,
    #[serde(rename = "variables", skip_serializing_if = "Option::is_none")]
    pub variables: Option<Vec<std::collections::HashMap<String, serde_json::Value>>>,
    #[serde(rename = "script", skip_serializing_if = "Option::is_none")]
    pub script: Option<String>,
    #[serde(rename = "eyeCatchingImageId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub eye_catching_image_id: Option<Option<String>>,
    #[serde(rename = "font", skip_serializing_if = "Option::is_none")]
    pub font: Option<Font>,
    #[serde(rename = "alignCenter", skip_serializing_if = "Option::is_none")]
    pub align_center: Option<bool>,
    #[serde(rename = "hideTitleWhenPinned", skip_serializing_if = "Option::is_none")]
    pub hide_title_when_pinned: Option<bool>,
}

impl PagesUpdateRequest {
    pub fn new(page_id: String) -> PagesUpdateRequest {
        PagesUpdateRequest {
            page_id,
            title: None,
            name: None,
            summary: None,
            content: None,
            variables: None,
            script: None,
            eye_catching_image_id: None,
            font: None,
            align_center: None,
            hide_title_when_pinned: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Font {
    #[serde(rename = "serif")]
    Serif,
    #[serde(rename = "sans-serif")]
    SansSerif,
}

impl Default for Font {
    fn default() -> Font {
        Self::Serif
    }
}

