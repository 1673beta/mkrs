/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetaLite {
    #[serde(rename = "maintainerName", deserialize_with = "Option::deserialize")]
    pub maintainer_name: Option<String>,
    #[serde(rename = "maintainerEmail", deserialize_with = "Option::deserialize")]
    pub maintainer_email: Option<String>,
    #[serde(rename = "version")]
    pub version: String,
    #[serde(rename = "providesTarball")]
    pub provides_tarball: bool,
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<String>,
    #[serde(rename = "shortName", deserialize_with = "Option::deserialize")]
    pub short_name: Option<String>,
    #[serde(rename = "uri")]
    pub uri: String,
    #[serde(rename = "description", deserialize_with = "Option::deserialize")]
    pub description: Option<String>,
    #[serde(rename = "langs")]
    pub langs: Vec<String>,
    #[serde(rename = "tosUrl", deserialize_with = "Option::deserialize")]
    pub tos_url: Option<String>,
    #[serde(rename = "repositoryUrl", deserialize_with = "Option::deserialize")]
    pub repository_url: Option<String>,
    #[serde(rename = "feedbackUrl", deserialize_with = "Option::deserialize")]
    pub feedback_url: Option<String>,
    #[serde(rename = "defaultDarkTheme", deserialize_with = "Option::deserialize")]
    pub default_dark_theme: Option<String>,
    #[serde(rename = "defaultLightTheme", deserialize_with = "Option::deserialize")]
    pub default_light_theme: Option<String>,
    #[serde(rename = "disableRegistration")]
    pub disable_registration: bool,
    #[serde(rename = "emailRequiredForSignup")]
    pub email_required_for_signup: bool,
    #[serde(rename = "enableHcaptcha")]
    pub enable_hcaptcha: bool,
    #[serde(rename = "hcaptchaSiteKey", deserialize_with = "Option::deserialize")]
    pub hcaptcha_site_key: Option<String>,
    #[serde(rename = "enableMcaptcha")]
    pub enable_mcaptcha: bool,
    #[serde(rename = "mcaptchaSiteKey", deserialize_with = "Option::deserialize")]
    pub mcaptcha_site_key: Option<String>,
    #[serde(rename = "mcaptchaInstanceUrl", deserialize_with = "Option::deserialize")]
    pub mcaptcha_instance_url: Option<String>,
    #[serde(rename = "enableRecaptcha")]
    pub enable_recaptcha: bool,
    #[serde(rename = "recaptchaSiteKey", deserialize_with = "Option::deserialize")]
    pub recaptcha_site_key: Option<String>,
    #[serde(rename = "enableTurnstile")]
    pub enable_turnstile: bool,
    #[serde(rename = "turnstileSiteKey", deserialize_with = "Option::deserialize")]
    pub turnstile_site_key: Option<String>,
    #[serde(rename = "swPublickey", deserialize_with = "Option::deserialize")]
    pub sw_publickey: Option<String>,
    #[serde(rename = "mascotImageUrl")]
    pub mascot_image_url: String,
    #[serde(rename = "bannerUrl", deserialize_with = "Option::deserialize")]
    pub banner_url: Option<String>,
    #[serde(rename = "serverErrorImageUrl", deserialize_with = "Option::deserialize")]
    pub server_error_image_url: Option<String>,
    #[serde(rename = "infoImageUrl", deserialize_with = "Option::deserialize")]
    pub info_image_url: Option<String>,
    #[serde(rename = "notFoundImageUrl", deserialize_with = "Option::deserialize")]
    pub not_found_image_url: Option<String>,
    #[serde(rename = "iconUrl", deserialize_with = "Option::deserialize")]
    pub icon_url: Option<String>,
    #[serde(rename = "maxNoteTextLength")]
    pub max_note_text_length: f64,
    #[serde(rename = "ads")]
    pub ads: Vec<models::MetaLiteAdsInner>,
    #[serde(rename = "notesPerOneAd")]
    pub notes_per_one_ad: f64,
    #[serde(rename = "enableEmail")]
    pub enable_email: bool,
    #[serde(rename = "enableServiceWorker")]
    pub enable_service_worker: bool,
    #[serde(rename = "translatorAvailable")]
    pub translator_available: bool,
    #[serde(rename = "mediaProxy")]
    pub media_proxy: String,
    #[serde(rename = "enableUrlPreview")]
    pub enable_url_preview: bool,
    #[serde(rename = "backgroundImageUrl", deserialize_with = "Option::deserialize")]
    pub background_image_url: Option<String>,
    #[serde(rename = "impressumUrl", deserialize_with = "Option::deserialize")]
    pub impressum_url: Option<String>,
    #[serde(rename = "logoImageUrl", deserialize_with = "Option::deserialize")]
    pub logo_image_url: Option<String>,
    #[serde(rename = "privacyPolicyUrl", deserialize_with = "Option::deserialize")]
    pub privacy_policy_url: Option<String>,
    #[serde(rename = "inquiryUrl", deserialize_with = "Option::deserialize")]
    pub inquiry_url: Option<String>,
    #[serde(rename = "serverRules")]
    pub server_rules: Vec<String>,
    #[serde(rename = "themeColor", deserialize_with = "Option::deserialize")]
    pub theme_color: Option<String>,
    #[serde(rename = "policies")]
    pub policies: models::RolePolicies,
    #[serde(rename = "noteSearchableScope")]
    pub note_searchable_scope: NoteSearchableScope,
    #[serde(rename = "maxFileSize")]
    pub max_file_size: f64,
}

impl MetaLite {
    pub fn new(maintainer_name: Option<String>, maintainer_email: Option<String>, version: String, provides_tarball: bool, name: Option<String>, short_name: Option<String>, uri: String, description: Option<String>, langs: Vec<String>, tos_url: Option<String>, repository_url: Option<String>, feedback_url: Option<String>, default_dark_theme: Option<String>, default_light_theme: Option<String>, disable_registration: bool, email_required_for_signup: bool, enable_hcaptcha: bool, hcaptcha_site_key: Option<String>, enable_mcaptcha: bool, mcaptcha_site_key: Option<String>, mcaptcha_instance_url: Option<String>, enable_recaptcha: bool, recaptcha_site_key: Option<String>, enable_turnstile: bool, turnstile_site_key: Option<String>, sw_publickey: Option<String>, mascot_image_url: String, banner_url: Option<String>, server_error_image_url: Option<String>, info_image_url: Option<String>, not_found_image_url: Option<String>, icon_url: Option<String>, max_note_text_length: f64, ads: Vec<models::MetaLiteAdsInner>, notes_per_one_ad: f64, enable_email: bool, enable_service_worker: bool, translator_available: bool, media_proxy: String, enable_url_preview: bool, background_image_url: Option<String>, impressum_url: Option<String>, logo_image_url: Option<String>, privacy_policy_url: Option<String>, inquiry_url: Option<String>, server_rules: Vec<String>, theme_color: Option<String>, policies: models::RolePolicies, note_searchable_scope: NoteSearchableScope, max_file_size: f64) -> MetaLite {
        MetaLite {
            maintainer_name,
            maintainer_email,
            version,
            provides_tarball,
            name,
            short_name,
            uri,
            description,
            langs,
            tos_url,
            repository_url,
            feedback_url,
            default_dark_theme,
            default_light_theme,
            disable_registration,
            email_required_for_signup,
            enable_hcaptcha,
            hcaptcha_site_key,
            enable_mcaptcha,
            mcaptcha_site_key,
            mcaptcha_instance_url,
            enable_recaptcha,
            recaptcha_site_key,
            enable_turnstile,
            turnstile_site_key,
            sw_publickey,
            mascot_image_url,
            banner_url,
            server_error_image_url,
            info_image_url,
            not_found_image_url,
            icon_url,
            max_note_text_length,
            ads,
            notes_per_one_ad,
            enable_email,
            enable_service_worker,
            translator_available,
            media_proxy,
            enable_url_preview,
            background_image_url,
            impressum_url,
            logo_image_url,
            privacy_policy_url,
            inquiry_url,
            server_rules,
            theme_color,
            policies,
            note_searchable_scope,
            max_file_size,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NoteSearchableScope {
    #[serde(rename = "local")]
    Local,
    #[serde(rename = "global")]
    Global,
}

impl Default for NoteSearchableScope {
    fn default() -> NoteSearchableScope {
        Self::Local
    }
}

