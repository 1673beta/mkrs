/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Role {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "color")]
    pub color: String,
    #[serde(rename = "iconUrl")]
    pub icon_url: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "isModerator")]
    pub is_moderator: bool,
    #[serde(rename = "isAdministrator")]
    pub is_administrator: bool,
    #[serde(rename = "displayOrder")]
    pub display_order: i32,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    #[serde(rename = "target")]
    pub target: Target,
    #[serde(rename = "condFormula", deserialize_with = "Option::deserialize")]
    pub cond_formula: Option<serde_json::Value>,
    #[serde(rename = "isPublic")]
    pub is_public: bool,
    #[serde(rename = "isExplorable")]
    pub is_explorable: bool,
    #[serde(rename = "asBadge")]
    pub as_badge: bool,
    #[serde(rename = "canEditMembersByModerator")]
    pub can_edit_members_by_moderator: bool,
    #[serde(rename = "policies")]
    pub policies: std::collections::HashMap<String, models::RoleAllOfPolicies>,
    #[serde(rename = "usersCount")]
    pub users_count: i32,
}

impl Role {
    pub fn new(id: String, name: String, color: String, icon_url: String, description: String, is_moderator: bool, is_administrator: bool, display_order: i32, created_at: String, updated_at: String, target: Target, cond_formula: Option<serde_json::Value>, is_public: bool, is_explorable: bool, as_badge: bool, can_edit_members_by_moderator: bool, policies: std::collections::HashMap<String, models::RoleAllOfPolicies>, users_count: i32) -> Role {
        Role {
            id,
            name,
            color,
            icon_url,
            description,
            is_moderator,
            is_administrator,
            display_order,
            created_at,
            updated_at,
            target,
            cond_formula,
            is_public,
            is_explorable,
            as_badge,
            can_edit_members_by_moderator,
            policies,
            users_count,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Target {
    #[serde(rename = "manual")]
    Manual,
    #[serde(rename = "conditional")]
    Conditional,
}

impl Default for Target {
    fn default() -> Target {
        Self::Manual
    }
}

