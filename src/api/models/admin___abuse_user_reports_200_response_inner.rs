/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminAbuseUserReports200ResponseInner {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "comment")]
    pub comment: String,
    #[serde(rename = "resolved")]
    pub resolved: bool,
    #[serde(rename = "reporterId")]
    pub reporter_id: String,
    #[serde(rename = "targetUserId")]
    pub target_user_id: String,
    #[serde(rename = "assigneeId", deserialize_with = "Option::deserialize")]
    pub assignee_id: Option<String>,
    #[serde(rename = "reporter")]
    pub reporter: models::UserDetailedNotMe,
    #[serde(rename = "targetUser")]
    pub target_user: models::UserDetailedNotMe,
    #[serde(rename = "assignee", skip_serializing_if = "Option::is_none")]
    pub assignee: Option<Box<models::UserDetailedNotMe>>,
}

impl AdminAbuseUserReports200ResponseInner {
    pub fn new(id: String, created_at: String, comment: String, resolved: bool, reporter_id: String, target_user_id: String, assignee_id: Option<String>, reporter: models::UserDetailedNotMe, target_user: models::UserDetailedNotMe) -> AdminAbuseUserReports200ResponseInner {
        AdminAbuseUserReports200ResponseInner {
            id,
            created_at,
            comment,
            resolved,
            reporter_id,
            target_user_id,
            assignee_id,
            reporter,
            target_user,
            assignee: None,
        }
    }
}

