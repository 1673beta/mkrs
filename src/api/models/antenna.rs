/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Antenna {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "keywords")]
    pub keywords: Vec<Vec<String>>,
    #[serde(rename = "excludeKeywords")]
    pub exclude_keywords: Vec<Vec<String>>,
    #[serde(rename = "src")]
    pub src: Src,
    #[serde(rename = "userListId", deserialize_with = "Option::deserialize")]
    pub user_list_id: Option<String>,
    #[serde(rename = "users")]
    pub users: Vec<String>,
    #[serde(rename = "caseSensitive")]
    pub case_sensitive: bool,
    #[serde(rename = "localOnly")]
    pub local_only: bool,
    #[serde(rename = "excludeBots")]
    pub exclude_bots: bool,
    #[serde(rename = "withReplies")]
    pub with_replies: bool,
    #[serde(rename = "withFile")]
    pub with_file: bool,
    #[serde(rename = "isActive")]
    pub is_active: bool,
    #[serde(rename = "hasUnreadNote")]
    pub has_unread_note: bool,
    #[serde(rename = "notify")]
    pub notify: bool,
}

impl Antenna {
    pub fn new(id: String, created_at: String, name: String, keywords: Vec<Vec<String>>, exclude_keywords: Vec<Vec<String>>, src: Src, user_list_id: Option<String>, users: Vec<String>, case_sensitive: bool, local_only: bool, exclude_bots: bool, with_replies: bool, with_file: bool, is_active: bool, has_unread_note: bool, notify: bool) -> Antenna {
        Antenna {
            id,
            created_at,
            name,
            keywords,
            exclude_keywords,
            src,
            user_list_id,
            users,
            case_sensitive,
            local_only,
            exclude_bots,
            with_replies,
            with_file,
            is_active,
            has_unread_note,
            notify,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Src {
    #[serde(rename = "home")]
    Home,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "users")]
    Users,
    #[serde(rename = "list")]
    List,
    #[serde(rename = "users_blacklist")]
    UsersBlacklist,
}

impl Default for Src {
    fn default() -> Src {
        Self::Home
    }
}

