/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AntennasUpdateRequest {
    #[serde(rename = "antennaId")]
    pub antenna_id: String,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "src", skip_serializing_if = "Option::is_none")]
    pub src: Option<Src>,
    #[serde(rename = "userListId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_list_id: Option<Option<String>>,
    #[serde(rename = "keywords", skip_serializing_if = "Option::is_none")]
    pub keywords: Option<Vec<Vec<String>>>,
    #[serde(rename = "excludeKeywords", skip_serializing_if = "Option::is_none")]
    pub exclude_keywords: Option<Vec<Vec<String>>>,
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<String>>,
    #[serde(rename = "caseSensitive", skip_serializing_if = "Option::is_none")]
    pub case_sensitive: Option<bool>,
    #[serde(rename = "localOnly", skip_serializing_if = "Option::is_none")]
    pub local_only: Option<bool>,
    #[serde(rename = "excludeBots", skip_serializing_if = "Option::is_none")]
    pub exclude_bots: Option<bool>,
    #[serde(rename = "withReplies", skip_serializing_if = "Option::is_none")]
    pub with_replies: Option<bool>,
    #[serde(rename = "withFile", skip_serializing_if = "Option::is_none")]
    pub with_file: Option<bool>,
}

impl AntennasUpdateRequest {
    pub fn new(antenna_id: String) -> AntennasUpdateRequest {
        AntennasUpdateRequest {
            antenna_id,
            name: None,
            src: None,
            user_list_id: None,
            keywords: None,
            exclude_keywords: None,
            users: None,
            case_sensitive: None,
            local_only: None,
            exclude_bots: None,
            with_replies: None,
            with_file: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Src {
    #[serde(rename = "home")]
    Home,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "users")]
    Users,
    #[serde(rename = "list")]
    List,
    #[serde(rename = "users_blacklist")]
    UsersBlacklist,
}

impl Default for Src {
    fn default() -> Src {
        Self::Home
    }
}

