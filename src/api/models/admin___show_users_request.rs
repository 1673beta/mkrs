/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminShowUsersRequest {
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<i32>,
    #[serde(rename = "sort", skip_serializing_if = "Option::is_none")]
    pub sort: Option<Sort>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    #[serde(rename = "origin", skip_serializing_if = "Option::is_none")]
    pub origin: Option<Origin>,
    #[serde(rename = "username", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub username: Option<Option<String>>,
    /// The local host is represented with `null`.
    #[serde(rename = "hostname", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<Option<String>>,
}

impl AdminShowUsersRequest {
    pub fn new() -> AdminShowUsersRequest {
        AdminShowUsersRequest {
            limit: None,
            offset: None,
            sort: None,
            state: None,
            origin: None,
            username: None,
            hostname: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Sort {
    #[serde(rename = "+follower")]
    PlusFollower,
    #[serde(rename = "-follower")]
    Follower,
    #[serde(rename = "+createdAt")]
    PlusCreatedAt,
    #[serde(rename = "-createdAt")]
    CreatedAt,
    #[serde(rename = "+updatedAt")]
    PlusUpdatedAt,
    #[serde(rename = "-updatedAt")]
    UpdatedAt,
    #[serde(rename = "+lastActiveDate")]
    PlusLastActiveDate,
    #[serde(rename = "-lastActiveDate")]
    LastActiveDate,
}

impl Default for Sort {
    fn default() -> Sort {
        Self::PlusFollower
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "alive")]
    Alive,
    #[serde(rename = "available")]
    Available,
    #[serde(rename = "admin")]
    Admin,
    #[serde(rename = "moderator")]
    Moderator,
    #[serde(rename = "adminOrModerator")]
    AdminOrModerator,
    #[serde(rename = "suspended")]
    Suspended,
}

impl Default for State {
    fn default() -> State {
        Self::All
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Origin {
    #[serde(rename = "combined")]
    Combined,
    #[serde(rename = "local")]
    Local,
    #[serde(rename = "remote")]
    Remote,
}

impl Default for Origin {
    fn default() -> Origin {
        Self::Combined
    }
}

