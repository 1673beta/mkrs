/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct I2faRegisterKey200Response {
    #[serde(rename = "rp")]
    pub rp: Box<models::I2faRegisterKey200ResponseRp>,
    #[serde(rename = "user")]
    pub user: Box<models::I2faRegisterKey200ResponseUser>,
    #[serde(rename = "challenge")]
    pub challenge: String,
    #[serde(rename = "pubKeyCredParams")]
    pub pub_key_cred_params: Vec<models::I2faRegisterKey200ResponsePubKeyCredParamsInner>,
    #[serde(rename = "timeout", deserialize_with = "Option::deserialize")]
    pub timeout: Option<f64>,
    #[serde(rename = "excludeCredentials", deserialize_with = "Option::deserialize")]
    pub exclude_credentials: Option<Vec<models::I2faRegisterKey200ResponseExcludeCredentialsInner>>,
    #[serde(rename = "authenticatorSelection")]
    pub authenticator_selection: Box<models::I2faRegisterKey200ResponseAuthenticatorSelection>,
    #[serde(rename = "attestation", deserialize_with = "Option::deserialize")]
    pub attestation: Option<Attestation>,
    #[serde(rename = "extensions")]
    pub extensions: Box<models::I2faRegisterKey200ResponseExtensions>,
}

impl I2faRegisterKey200Response {
    pub fn new(rp: models::I2faRegisterKey200ResponseRp, user: models::I2faRegisterKey200ResponseUser, challenge: String, pub_key_cred_params: Vec<models::I2faRegisterKey200ResponsePubKeyCredParamsInner>, timeout: Option<f64>, exclude_credentials: Option<Vec<models::I2faRegisterKey200ResponseExcludeCredentialsInner>>, authenticator_selection: models::I2faRegisterKey200ResponseAuthenticatorSelection, attestation: Option<Attestation>, extensions: models::I2faRegisterKey200ResponseExtensions) -> I2faRegisterKey200Response {
        I2faRegisterKey200Response {
            rp: Box::new(rp),
            user: Box::new(user),
            challenge,
            pub_key_cred_params,
            timeout,
            exclude_credentials,
            authenticator_selection: Box::new(authenticator_selection),
            attestation,
            extensions: Box::new(extensions),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Attestation {
    #[serde(rename = "direct")]
    Direct,
    #[serde(rename = "enterprise")]
    Enterprise,
    #[serde(rename = "indirect")]
    Indirect,
    #[serde(rename = "none")]
    None,
}

impl Default for Attestation {
    fn default() -> Attestation {
        Self::Direct
    }
}

