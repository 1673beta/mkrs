/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserLite {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<String>,
    #[serde(rename = "username")]
    pub username: String,
    /// The local host is represented with `null`.
    #[serde(rename = "host", deserialize_with = "Option::deserialize")]
    pub host: Option<String>,
    #[serde(rename = "avatarUrl", deserialize_with = "Option::deserialize")]
    pub avatar_url: Option<String>,
    #[serde(rename = "avatarBlurhash", deserialize_with = "Option::deserialize")]
    pub avatar_blurhash: Option<String>,
    #[serde(rename = "avatarDecorations")]
    pub avatar_decorations: Vec<models::UserLiteAvatarDecorationsInner>,
    #[serde(rename = "isBot", skip_serializing_if = "Option::is_none")]
    pub is_bot: Option<bool>,
    #[serde(rename = "isCat", skip_serializing_if = "Option::is_none")]
    pub is_cat: Option<bool>,
    #[serde(rename = "instance", skip_serializing_if = "Option::is_none")]
    pub instance: Option<Box<models::UserLiteInstance>>,
    #[serde(rename = "emojis")]
    pub emojis: std::collections::HashMap<String, String>,
    #[serde(rename = "onlineStatus")]
    pub online_status: OnlineStatus,
    #[serde(rename = "badgeRoles", skip_serializing_if = "Option::is_none")]
    pub badge_roles: Option<Vec<models::UserLiteBadgeRolesInner>>,
}

impl UserLite {
    pub fn new(id: String, name: Option<String>, username: String, host: Option<String>, avatar_url: Option<String>, avatar_blurhash: Option<String>, avatar_decorations: Vec<models::UserLiteAvatarDecorationsInner>, emojis: std::collections::HashMap<String, String>, online_status: OnlineStatus) -> UserLite {
        UserLite {
            id,
            name,
            username,
            host,
            avatar_url,
            avatar_blurhash,
            avatar_decorations,
            is_bot: None,
            is_cat: None,
            instance: None,
            emojis,
            online_status,
            badge_roles: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OnlineStatus {
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "online")]
    Online,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "offline")]
    Offline,
}

impl Default for OnlineStatus {
    fn default() -> OnlineStatus {
        Self::Unknown
    }
}

