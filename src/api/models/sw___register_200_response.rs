/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwRegister200Response {
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    #[serde(rename = "key", deserialize_with = "Option::deserialize")]
    pub key: Option<String>,
    #[serde(rename = "userId")]
    pub user_id: String,
    #[serde(rename = "endpoint")]
    pub endpoint: String,
    #[serde(rename = "sendReadMessage")]
    pub send_read_message: bool,
}

impl SwRegister200Response {
    pub fn new(key: Option<String>, user_id: String, endpoint: String, send_read_message: bool) -> SwRegister200Response {
        SwRegister200Response {
            state: None,
            key,
            user_id,
            endpoint,
            send_read_message,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "already-subscribed")]
    AlreadySubscribed,
    #[serde(rename = "subscribed")]
    Subscribed,
}

impl Default for State {
    fn default() -> State {
        Self::AlreadySubscribed
    }
}

