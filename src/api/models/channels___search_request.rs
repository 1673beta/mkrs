/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChannelsSearchRequest {
    #[serde(rename = "query")]
    pub query: String,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "sinceId", skip_serializing_if = "Option::is_none")]
    pub since_id: Option<String>,
    #[serde(rename = "untilId", skip_serializing_if = "Option::is_none")]
    pub until_id: Option<String>,
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
}

impl ChannelsSearchRequest {
    pub fn new(query: String) -> ChannelsSearchRequest {
        ChannelsSearchRequest {
            query,
            r#type: None,
            since_id: None,
            until_id: None,
            limit: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "nameAndDescription")]
    NameAndDescription,
    #[serde(rename = "nameOnly")]
    NameOnly,
}

impl Default for Type {
    fn default() -> Type {
        Self::NameAndDescription
    }
}

