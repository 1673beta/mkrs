/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminRolesUpdateRequest {
    #[serde(rename = "roleId")]
    pub role_id: String,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "color", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub color: Option<Option<String>>,
    #[serde(rename = "iconUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub icon_url: Option<Option<String>>,
    #[serde(rename = "target", skip_serializing_if = "Option::is_none")]
    pub target: Option<Target>,
    #[serde(rename = "condFormula", skip_serializing_if = "Option::is_none")]
    pub cond_formula: Option<serde_json::Value>,
    #[serde(rename = "isPublic", skip_serializing_if = "Option::is_none")]
    pub is_public: Option<bool>,
    #[serde(rename = "isModerator", skip_serializing_if = "Option::is_none")]
    pub is_moderator: Option<bool>,
    #[serde(rename = "isAdministrator", skip_serializing_if = "Option::is_none")]
    pub is_administrator: Option<bool>,
    #[serde(rename = "isExplorable", skip_serializing_if = "Option::is_none")]
    pub is_explorable: Option<bool>,
    #[serde(rename = "asBadge", skip_serializing_if = "Option::is_none")]
    pub as_badge: Option<bool>,
    #[serde(rename = "canEditMembersByModerator", skip_serializing_if = "Option::is_none")]
    pub can_edit_members_by_moderator: Option<bool>,
    #[serde(rename = "displayOrder", skip_serializing_if = "Option::is_none")]
    pub display_order: Option<f64>,
    #[serde(rename = "policies", skip_serializing_if = "Option::is_none")]
    pub policies: Option<serde_json::Value>,
}

impl AdminRolesUpdateRequest {
    pub fn new(role_id: String) -> AdminRolesUpdateRequest {
        AdminRolesUpdateRequest {
            role_id,
            name: None,
            description: None,
            color: None,
            icon_url: None,
            target: None,
            cond_formula: None,
            is_public: None,
            is_moderator: None,
            is_administrator: None,
            is_explorable: None,
            as_badge: None,
            can_edit_members_by_moderator: None,
            display_order: None,
            policies: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Target {
    #[serde(rename = "manual")]
    Manual,
    #[serde(rename = "conditional")]
    Conditional,
}

impl Default for Target {
    fn default() -> Target {
        Self::Manual
    }
}

