/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminDriveShowFile200Response {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "userId", deserialize_with = "Option::deserialize")]
    pub user_id: Option<String>,
    /// The local host is represented with `null`.
    #[serde(rename = "userHost", deserialize_with = "Option::deserialize")]
    pub user_host: Option<String>,
    #[serde(rename = "md5")]
    pub md5: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "size")]
    pub size: f64,
    #[serde(rename = "comment", deserialize_with = "Option::deserialize")]
    pub comment: Option<String>,
    #[serde(rename = "blurhash", deserialize_with = "Option::deserialize")]
    pub blurhash: Option<String>,
    #[serde(rename = "properties")]
    pub properties: Box<models::AdminDriveShowFile200ResponseProperties>,
    #[serde(rename = "storedInternal", deserialize_with = "Option::deserialize")]
    pub stored_internal: Option<bool>,
    #[serde(rename = "url", deserialize_with = "Option::deserialize")]
    pub url: Option<String>,
    #[serde(rename = "thumbnailUrl", deserialize_with = "Option::deserialize")]
    pub thumbnail_url: Option<String>,
    #[serde(rename = "webpublicUrl", deserialize_with = "Option::deserialize")]
    pub webpublic_url: Option<String>,
    #[serde(rename = "accessKey", deserialize_with = "Option::deserialize")]
    pub access_key: Option<String>,
    #[serde(rename = "thumbnailAccessKey", deserialize_with = "Option::deserialize")]
    pub thumbnail_access_key: Option<String>,
    #[serde(rename = "webpublicAccessKey", deserialize_with = "Option::deserialize")]
    pub webpublic_access_key: Option<String>,
    #[serde(rename = "uri", deserialize_with = "Option::deserialize")]
    pub uri: Option<String>,
    #[serde(rename = "src", deserialize_with = "Option::deserialize")]
    pub src: Option<String>,
    #[serde(rename = "folderId", deserialize_with = "Option::deserialize")]
    pub folder_id: Option<String>,
    #[serde(rename = "isSensitive")]
    pub is_sensitive: bool,
    #[serde(rename = "isLink")]
    pub is_link: bool,
}

impl AdminDriveShowFile200Response {
    pub fn new(id: String, created_at: String, user_id: Option<String>, user_host: Option<String>, md5: String, name: String, r#type: String, size: f64, comment: Option<String>, blurhash: Option<String>, properties: models::AdminDriveShowFile200ResponseProperties, stored_internal: Option<bool>, url: Option<String>, thumbnail_url: Option<String>, webpublic_url: Option<String>, access_key: Option<String>, thumbnail_access_key: Option<String>, webpublic_access_key: Option<String>, uri: Option<String>, src: Option<String>, folder_id: Option<String>, is_sensitive: bool, is_link: bool) -> AdminDriveShowFile200Response {
        AdminDriveShowFile200Response {
            id,
            created_at,
            user_id,
            user_host,
            md5,
            name,
            r#type,
            size,
            comment,
            blurhash,
            properties: Box::new(properties),
            stored_internal,
            url,
            thumbnail_url,
            webpublic_url,
            access_key,
            thumbnail_access_key,
            webpublic_access_key,
            uri,
            src,
            folder_id,
            is_sensitive,
            is_link,
        }
    }
}

