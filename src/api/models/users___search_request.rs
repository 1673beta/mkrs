/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UsersSearchRequest {
    #[serde(rename = "query")]
    pub query: String,
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<i32>,
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    #[serde(rename = "origin", skip_serializing_if = "Option::is_none")]
    pub origin: Option<Origin>,
    #[serde(rename = "detail", skip_serializing_if = "Option::is_none")]
    pub detail: Option<bool>,
}

impl UsersSearchRequest {
    pub fn new(query: String) -> UsersSearchRequest {
        UsersSearchRequest {
            query,
            offset: None,
            limit: None,
            origin: None,
            detail: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Origin {
    #[serde(rename = "local")]
    Local,
    #[serde(rename = "remote")]
    Remote,
    #[serde(rename = "combined")]
    Combined,
}

impl Default for Origin {
    fn default() -> Origin {
        Self::Local
    }
}

