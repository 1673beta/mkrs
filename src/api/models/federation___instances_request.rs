/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FederationInstancesRequest {
    /// Omit or use `null` to not filter by host.
    #[serde(rename = "host", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub host: Option<Option<String>>,
    #[serde(rename = "blocked", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub blocked: Option<Option<bool>>,
    #[serde(rename = "notResponding", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub not_responding: Option<Option<bool>>,
    #[serde(rename = "suspended", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub suspended: Option<Option<bool>>,
    #[serde(rename = "silenced", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub silenced: Option<Option<bool>>,
    #[serde(rename = "federating", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub federating: Option<Option<bool>>,
    #[serde(rename = "subscribing", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subscribing: Option<Option<bool>>,
    #[serde(rename = "publishing", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub publishing: Option<Option<bool>>,
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<i32>,
    #[serde(rename = "sort", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sort: Option<Option<Sort>>,
}

impl FederationInstancesRequest {
    pub fn new() -> FederationInstancesRequest {
        FederationInstancesRequest {
            host: None,
            blocked: None,
            not_responding: None,
            suspended: None,
            silenced: None,
            federating: None,
            subscribing: None,
            publishing: None,
            limit: None,
            offset: None,
            sort: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Sort {
    #[serde(rename = "+pubSub")]
    PlusPubSub,
    #[serde(rename = "-pubSub")]
    PubSub,
    #[serde(rename = "+notes")]
    PlusNotes,
    #[serde(rename = "-notes")]
    Notes,
    #[serde(rename = "+users")]
    PlusUsers,
    #[serde(rename = "-users")]
    Users,
    #[serde(rename = "+following")]
    PlusFollowing,
    #[serde(rename = "-following")]
    Following,
    #[serde(rename = "+followers")]
    PlusFollowers,
    #[serde(rename = "-followers")]
    Followers,
    #[serde(rename = "+firstRetrievedAt")]
    PlusFirstRetrievedAt,
    #[serde(rename = "-firstRetrievedAt")]
    FirstRetrievedAt,
    #[serde(rename = "+latestRequestReceivedAt")]
    PlusLatestRequestReceivedAt,
    #[serde(rename = "-latestRequestReceivedAt")]
    LatestRequestReceivedAt,
}

impl Default for Sort {
    fn default() -> Sort {
        Self::PlusPubSub
    }
}

