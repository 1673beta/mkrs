/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserLiteInstance {
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<String>,
    #[serde(rename = "softwareName", deserialize_with = "Option::deserialize")]
    pub software_name: Option<String>,
    #[serde(rename = "softwareVersion", deserialize_with = "Option::deserialize")]
    pub software_version: Option<String>,
    #[serde(rename = "iconUrl", deserialize_with = "Option::deserialize")]
    pub icon_url: Option<String>,
    #[serde(rename = "faviconUrl", deserialize_with = "Option::deserialize")]
    pub favicon_url: Option<String>,
    #[serde(rename = "themeColor", deserialize_with = "Option::deserialize")]
    pub theme_color: Option<String>,
}

impl UserLiteInstance {
    pub fn new(name: Option<String>, software_name: Option<String>, software_version: Option<String>, icon_url: Option<String>, favicon_url: Option<String>, theme_color: Option<String>) -> UserLiteInstance {
        UserLiteInstance {
            name,
            software_name,
            software_version,
            icon_url,
            favicon_url,
            theme_color,
        }
    }
}

