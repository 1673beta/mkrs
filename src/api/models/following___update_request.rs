/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FollowingUpdateRequest {
    #[serde(rename = "userId")]
    pub user_id: String,
    #[serde(rename = "notify", skip_serializing_if = "Option::is_none")]
    pub notify: Option<Notify>,
    #[serde(rename = "withReplies", skip_serializing_if = "Option::is_none")]
    pub with_replies: Option<bool>,
}

impl FollowingUpdateRequest {
    pub fn new(user_id: String) -> FollowingUpdateRequest {
        FollowingUpdateRequest {
            user_id,
            notify: None,
            with_replies: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Notify {
    #[serde(rename = "normal")]
    Normal,
    #[serde(rename = "none")]
    None,
}

impl Default for Notify {
    fn default() -> Notify {
        Self::Normal
    }
}

