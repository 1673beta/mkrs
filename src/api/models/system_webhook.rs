/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SystemWebhook {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "isActive")]
    pub is_active: bool,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    #[serde(rename = "latestSentAt", deserialize_with = "Option::deserialize")]
    pub latest_sent_at: Option<String>,
    #[serde(rename = "latestStatus", deserialize_with = "Option::deserialize")]
    pub latest_status: Option<f64>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "on")]
    pub on: Vec<On>,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "secret")]
    pub secret: String,
}

impl SystemWebhook {
    pub fn new(id: String, is_active: bool, updated_at: String, latest_sent_at: Option<String>, latest_status: Option<f64>, name: String, on: Vec<On>, url: String, secret: String) -> SystemWebhook {
        SystemWebhook {
            id,
            is_active,
            updated_at,
            latest_sent_at,
            latest_status,
            name,
            on,
            url,
            secret,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum On {
    #[serde(rename = "abuseReport")]
    AbuseReport,
    #[serde(rename = "abuseReportResolved")]
    AbuseReportResolved,
    #[serde(rename = "userCreated")]
    UserCreated,
}

impl Default for On {
    fn default() -> On {
        Self::AbuseReport
    }
}

