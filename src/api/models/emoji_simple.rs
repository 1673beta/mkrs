/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EmojiSimple {
    #[serde(rename = "aliases")]
    pub aliases: Vec<String>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "category", deserialize_with = "Option::deserialize")]
    pub category: Option<String>,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "localOnly", skip_serializing_if = "Option::is_none")]
    pub local_only: Option<bool>,
    #[serde(rename = "isSensitive", skip_serializing_if = "Option::is_none")]
    pub is_sensitive: Option<bool>,
    #[serde(rename = "roleIdsThatCanBeUsedThisEmojiAsReaction", skip_serializing_if = "Option::is_none")]
    pub role_ids_that_can_be_used_this_emoji_as_reaction: Option<Vec<String>>,
}

impl EmojiSimple {
    pub fn new(aliases: Vec<String>, name: String, category: Option<String>, url: String) -> EmojiSimple {
        EmojiSimple {
            aliases,
            name,
            category,
            url,
            local_only: None,
            is_sensitive: None,
            role_ids_that_can_be_used_this_emoji_as_reaction: None,
        }
    }
}

