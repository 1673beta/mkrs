/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserDetailedNotMeOnly {
    #[serde(rename = "url", deserialize_with = "Option::deserialize")]
    pub url: Option<String>,
    #[serde(rename = "uri", deserialize_with = "Option::deserialize")]
    pub uri: Option<String>,
    #[serde(rename = "movedTo", deserialize_with = "Option::deserialize")]
    pub moved_to: Option<String>,
    #[serde(rename = "alsoKnownAs", deserialize_with = "Option::deserialize")]
    pub also_known_as: Option<Vec<String>>,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "updatedAt", deserialize_with = "Option::deserialize")]
    pub updated_at: Option<String>,
    #[serde(rename = "lastFetchedAt", deserialize_with = "Option::deserialize")]
    pub last_fetched_at: Option<String>,
    #[serde(rename = "bannerUrl", deserialize_with = "Option::deserialize")]
    pub banner_url: Option<String>,
    #[serde(rename = "bannerBlurhash", deserialize_with = "Option::deserialize")]
    pub banner_blurhash: Option<String>,
    #[serde(rename = "isLocked")]
    pub is_locked: bool,
    #[serde(rename = "isSilenced")]
    pub is_silenced: bool,
    #[serde(rename = "isSuspended")]
    pub is_suspended: bool,
    #[serde(rename = "description", deserialize_with = "Option::deserialize")]
    pub description: Option<String>,
    #[serde(rename = "location", deserialize_with = "Option::deserialize")]
    pub location: Option<String>,
    #[serde(rename = "birthday", deserialize_with = "Option::deserialize")]
    pub birthday: Option<String>,
    #[serde(rename = "lang", deserialize_with = "Option::deserialize")]
    pub lang: Option<String>,
    #[serde(rename = "fields")]
    pub fields: Vec<models::IUpdateRequestFieldsInner>,
    #[serde(rename = "verifiedLinks")]
    pub verified_links: Vec<String>,
    #[serde(rename = "followersCount")]
    pub followers_count: f64,
    #[serde(rename = "followingCount")]
    pub following_count: f64,
    #[serde(rename = "notesCount")]
    pub notes_count: f64,
    #[serde(rename = "pinnedNoteIds")]
    pub pinned_note_ids: Vec<String>,
    #[serde(rename = "pinnedNotes")]
    pub pinned_notes: Vec<models::Note>,
    #[serde(rename = "pinnedPageId", deserialize_with = "Option::deserialize")]
    pub pinned_page_id: Option<String>,
    #[serde(rename = "pinnedPage")]
    pub pinned_page: Box<models::Page>,
    #[serde(rename = "publicReactions")]
    pub public_reactions: bool,
    #[serde(rename = "followingVisibility")]
    pub following_visibility: FollowingVisibility,
    #[serde(rename = "followersVisibility")]
    pub followers_visibility: FollowersVisibility,
    #[serde(rename = "twoFactorEnabled")]
    pub two_factor_enabled: bool,
    #[serde(rename = "usePasswordLessLogin")]
    pub use_password_less_login: bool,
    #[serde(rename = "securityKeys")]
    pub security_keys: bool,
    #[serde(rename = "roles")]
    pub roles: Vec<models::RoleLite>,
    #[serde(rename = "memo", deserialize_with = "Option::deserialize")]
    pub memo: Option<String>,
    #[serde(rename = "moderationNote", skip_serializing_if = "Option::is_none")]
    pub moderation_note: Option<String>,
    #[serde(rename = "isFollowing", skip_serializing_if = "Option::is_none")]
    pub is_following: Option<bool>,
    #[serde(rename = "isFollowed", skip_serializing_if = "Option::is_none")]
    pub is_followed: Option<bool>,
    #[serde(rename = "hasPendingFollowRequestFromYou", skip_serializing_if = "Option::is_none")]
    pub has_pending_follow_request_from_you: Option<bool>,
    #[serde(rename = "hasPendingFollowRequestToYou", skip_serializing_if = "Option::is_none")]
    pub has_pending_follow_request_to_you: Option<bool>,
    #[serde(rename = "isBlocking", skip_serializing_if = "Option::is_none")]
    pub is_blocking: Option<bool>,
    #[serde(rename = "isBlocked", skip_serializing_if = "Option::is_none")]
    pub is_blocked: Option<bool>,
    #[serde(rename = "isMuted", skip_serializing_if = "Option::is_none")]
    pub is_muted: Option<bool>,
    #[serde(rename = "isRenoteMuted", skip_serializing_if = "Option::is_none")]
    pub is_renote_muted: Option<bool>,
    #[serde(rename = "notify", skip_serializing_if = "Option::is_none")]
    pub notify: Option<Notify>,
    #[serde(rename = "withReplies", skip_serializing_if = "Option::is_none")]
    pub with_replies: Option<bool>,
}

impl UserDetailedNotMeOnly {
    pub fn new(url: Option<String>, uri: Option<String>, moved_to: Option<String>, also_known_as: Option<Vec<String>>, created_at: String, updated_at: Option<String>, last_fetched_at: Option<String>, banner_url: Option<String>, banner_blurhash: Option<String>, is_locked: bool, is_silenced: bool, is_suspended: bool, description: Option<String>, location: Option<String>, birthday: Option<String>, lang: Option<String>, fields: Vec<models::IUpdateRequestFieldsInner>, verified_links: Vec<String>, followers_count: f64, following_count: f64, notes_count: f64, pinned_note_ids: Vec<String>, pinned_notes: Vec<models::Note>, pinned_page_id: Option<String>, pinned_page: models::Page, public_reactions: bool, following_visibility: FollowingVisibility, followers_visibility: FollowersVisibility, two_factor_enabled: bool, use_password_less_login: bool, security_keys: bool, roles: Vec<models::RoleLite>, memo: Option<String>) -> UserDetailedNotMeOnly {
        UserDetailedNotMeOnly {
            url,
            uri,
            moved_to,
            also_known_as,
            created_at,
            updated_at,
            last_fetched_at,
            banner_url,
            banner_blurhash,
            is_locked,
            is_silenced,
            is_suspended,
            description,
            location,
            birthday,
            lang,
            fields,
            verified_links,
            followers_count,
            following_count,
            notes_count,
            pinned_note_ids,
            pinned_notes,
            pinned_page_id,
            pinned_page: Box::new(pinned_page),
            public_reactions,
            following_visibility,
            followers_visibility,
            two_factor_enabled,
            use_password_less_login,
            security_keys,
            roles,
            memo,
            moderation_note: None,
            is_following: None,
            is_followed: None,
            has_pending_follow_request_from_you: None,
            has_pending_follow_request_to_you: None,
            is_blocking: None,
            is_blocked: None,
            is_muted: None,
            is_renote_muted: None,
            notify: None,
            with_replies: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FollowingVisibility {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "followers")]
    Followers,
    #[serde(rename = "private")]
    Private,
}

impl Default for FollowingVisibility {
    fn default() -> FollowingVisibility {
        Self::Public
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FollowersVisibility {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "followers")]
    Followers,
    #[serde(rename = "private")]
    Private,
}

impl Default for FollowersVisibility {
    fn default() -> FollowersVisibility {
        Self::Public
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Notify {
    #[serde(rename = "normal")]
    Normal,
    #[serde(rename = "none")]
    None,
}

impl Default for Notify {
    fn default() -> Notify {
        Self::Normal
    }
}

