/*
 * Misskey API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.9.0-alpha.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::api::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReversiGameDetailed {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "startedAt", deserialize_with = "Option::deserialize")]
    pub started_at: Option<String>,
    #[serde(rename = "endedAt", deserialize_with = "Option::deserialize")]
    pub ended_at: Option<String>,
    #[serde(rename = "isStarted")]
    pub is_started: bool,
    #[serde(rename = "isEnded")]
    pub is_ended: bool,
    #[serde(rename = "form1", deserialize_with = "Option::deserialize")]
    pub form1: Option<serde_json::Value>,
    #[serde(rename = "form2", deserialize_with = "Option::deserialize")]
    pub form2: Option<serde_json::Value>,
    #[serde(rename = "user1Ready")]
    pub user1_ready: bool,
    #[serde(rename = "user2Ready")]
    pub user2_ready: bool,
    #[serde(rename = "user1Id")]
    pub user1_id: String,
    #[serde(rename = "user2Id")]
    pub user2_id: String,
    #[serde(rename = "user1")]
    pub user1: models::UserLite,
    #[serde(rename = "user2")]
    pub user2: models::UserLite,
    #[serde(rename = "winnerId", deserialize_with = "Option::deserialize")]
    pub winner_id: Option<String>,
    #[serde(rename = "winner")]
    pub winner: Box<models::UserLite>,
    #[serde(rename = "surrenderedUserId", deserialize_with = "Option::deserialize")]
    pub surrendered_user_id: Option<String>,
    #[serde(rename = "timeoutUserId", deserialize_with = "Option::deserialize")]
    pub timeout_user_id: Option<String>,
    #[serde(rename = "black", deserialize_with = "Option::deserialize")]
    pub black: Option<f64>,
    #[serde(rename = "bw")]
    pub bw: String,
    #[serde(rename = "noIrregularRules")]
    pub no_irregular_rules: bool,
    #[serde(rename = "isLlotheo")]
    pub is_llotheo: bool,
    #[serde(rename = "canPutEverywhere")]
    pub can_put_everywhere: bool,
    #[serde(rename = "loopedBoard")]
    pub looped_board: bool,
    #[serde(rename = "timeLimitForEachTurn")]
    pub time_limit_for_each_turn: f64,
    #[serde(rename = "logs")]
    pub logs: Vec<Vec<f64>>,
    #[serde(rename = "map")]
    pub map: Vec<String>,
}

impl ReversiGameDetailed {
    pub fn new(id: String, created_at: String, started_at: Option<String>, ended_at: Option<String>, is_started: bool, is_ended: bool, form1: Option<serde_json::Value>, form2: Option<serde_json::Value>, user1_ready: bool, user2_ready: bool, user1_id: String, user2_id: String, user1: models::UserLite, user2: models::UserLite, winner_id: Option<String>, winner: models::UserLite, surrendered_user_id: Option<String>, timeout_user_id: Option<String>, black: Option<f64>, bw: String, no_irregular_rules: bool, is_llotheo: bool, can_put_everywhere: bool, looped_board: bool, time_limit_for_each_turn: f64, logs: Vec<Vec<f64>>, map: Vec<String>) -> ReversiGameDetailed {
        ReversiGameDetailed {
            id,
            created_at,
            started_at,
            ended_at,
            is_started,
            is_ended,
            form1,
            form2,
            user1_ready,
            user2_ready,
            user1_id,
            user2_id,
            user1,
            user2,
            winner_id,
            winner: Box::new(winner),
            surrendered_user_id,
            timeout_user_id,
            black,
            bw,
            no_irregular_rules,
            is_llotheo,
            can_put_everywhere,
            looped_board,
            time_limit_for_each_turn,
            logs,
            map,
        }
    }
}

